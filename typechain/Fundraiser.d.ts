/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FundraiserInterface extends ethers.utils.Interface {
  functions: {
    "approveWithdrawRequest(uint256)": FunctionFragment;
    "completeWithdrawRequest(uint256)": FunctionFragment;
    "createWithdrawAllRequest(string)": FunctionFragment;
    "createWithdrawRequest(string,uint256)": FunctionFragment;
    "donate()": FunctionFragment;
    "donatorCount()": FunctionFragment;
    "donators(address)": FunctionFragment;
    "fundingGoal()": FunctionFragment;
    "fundingGoalReached()": FunctionFragment;
    "fundings()": FunctionFragment;
    "fundraiserIsActive()": FunctionFragment;
    "minimumDonation()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRequests()": FunctionFragment;
    "recipient()": FunctionFragment;
    "refund(address)": FunctionFragment;
    "requestCount()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "statistics()": FunctionFragment;
    "threshold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawAllRequest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawRequest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donators", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fundingGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingGoalReached",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fundings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundraiserIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDonation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values: [string]): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "statistics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawAllRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingGoalReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundraiserIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "statistics", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;

  events: {};
}

export class Fundraiser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundraiserInterface;

  functions: {
    approveWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    completeWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "completeWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createWithdrawAllRequest(
      title: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createWithdrawAllRequest(string)"(
      title: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createWithdrawRequest(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createWithdrawRequest(string,uint256)"(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    donate(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "donate()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    donatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "donatorCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    donators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

    "donators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

    fundingGoal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundingGoal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingGoalReached(overrides?: CallOverrides): Promise<[boolean]>;

    "fundingGoalReached()"(overrides?: CallOverrides): Promise<[boolean]>;

    fundings(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundings()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundraiserIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    "fundraiserIsActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    minimumDonation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumDonation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingRequests()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    "recipient()"(overrides?: CallOverrides): Promise<[string]>;

    refund(rec: string, overrides?: Overrides): Promise<ContractTransaction>;

    "refund(address)"(
      rec: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "requestCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        title: string;
        amount: BigNumber;
        approvalCount: BigNumber;
        complete: boolean;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        title: string;
        amount: BigNumber;
        approvalCount: BigNumber;
        complete: boolean;
      }
    >;

    statistics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ]
    >;

    "statistics()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ]
    >;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "threshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  approveWithdrawRequest(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveWithdrawRequest(uint256)"(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  completeWithdrawRequest(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "completeWithdrawRequest(uint256)"(
    key: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createWithdrawAllRequest(
    title: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createWithdrawAllRequest(string)"(
    title: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createWithdrawRequest(
    title: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createWithdrawRequest(string,uint256)"(
    title: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  donate(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "donate()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  donatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  "donatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  donators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

  "donators(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

  fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingGoalReached(overrides?: CallOverrides): Promise<boolean>;

  "fundingGoalReached()"(overrides?: CallOverrides): Promise<boolean>;

  fundings(overrides?: CallOverrides): Promise<BigNumber>;

  "fundings()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundraiserIsActive(overrides?: CallOverrides): Promise<boolean>;

  "fundraiserIsActive()"(overrides?: CallOverrides): Promise<boolean>;

  minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumDonation()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

  recipient(overrides?: CallOverrides): Promise<string>;

  "recipient()"(overrides?: CallOverrides): Promise<string>;

  refund(rec: string, overrides?: Overrides): Promise<ContractTransaction>;

  "refund(address)"(
    rec: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestCount(overrides?: CallOverrides): Promise<BigNumber>;

  "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      title: string;
      amount: BigNumber;
      approvalCount: BigNumber;
      complete: boolean;
    }
  >;

  "requests(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      title: string;
      amount: BigNumber;
      approvalCount: BigNumber;
      complete: boolean;
    }
  >;

  statistics(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ]
  >;

  "statistics()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ]
  >;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    approveWithdrawRequest(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeWithdrawRequest(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "completeWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createWithdrawAllRequest(
      title: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createWithdrawAllRequest(string)"(
      title: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createWithdrawRequest(
      title: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createWithdrawRequest(string,uint256)"(
      title: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(overrides?: CallOverrides): Promise<void>;

    "donate()"(overrides?: CallOverrides): Promise<void>;

    donatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "donatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    donators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

    "donators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { donator: string; amount: BigNumber }>;

    fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingGoalReached(overrides?: CallOverrides): Promise<boolean>;

    "fundingGoalReached()"(overrides?: CallOverrides): Promise<boolean>;

    fundings(overrides?: CallOverrides): Promise<BigNumber>;

    "fundings()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundraiserIsActive(overrides?: CallOverrides): Promise<boolean>;

    "fundraiserIsActive()"(overrides?: CallOverrides): Promise<boolean>;

    minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumDonation()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<string>;

    "recipient()"(overrides?: CallOverrides): Promise<string>;

    refund(rec: string, overrides?: CallOverrides): Promise<void>;

    "refund(address)"(rec: string, overrides?: CallOverrides): Promise<void>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        title: string;
        amount: BigNumber;
        approvalCount: BigNumber;
        complete: boolean;
      }
    >;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        title: string;
        amount: BigNumber;
        approvalCount: BigNumber;
        complete: boolean;
      }
    >;

    statistics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ]
    >;

    "statistics()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ]
    >;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    approveWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    completeWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "completeWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createWithdrawAllRequest(
      title: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createWithdrawAllRequest(string)"(
      title: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createWithdrawRequest(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createWithdrawRequest(string,uint256)"(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    donate(overrides?: PayableOverrides): Promise<BigNumber>;

    "donate()"(overrides?: PayableOverrides): Promise<BigNumber>;

    donatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "donatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    donators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "donators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingGoal(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingGoal()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingGoalReached(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingGoalReached()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundings(overrides?: CallOverrides): Promise<BigNumber>;

    "fundings()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundraiserIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    "fundraiserIsActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumDonation()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    "recipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    refund(rec: string, overrides?: Overrides): Promise<BigNumber>;

    "refund(address)"(rec: string, overrides?: Overrides): Promise<BigNumber>;

    requestCount(overrides?: CallOverrides): Promise<BigNumber>;

    "requestCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    statistics(overrides?: CallOverrides): Promise<BigNumber>;

    "statistics()"(overrides?: CallOverrides): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    completeWithdrawRequest(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "completeWithdrawRequest(uint256)"(
      key: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createWithdrawAllRequest(
      title: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createWithdrawAllRequest(string)"(
      title: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createWithdrawRequest(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createWithdrawRequest(string,uint256)"(
      title: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    donate(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "donate()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    donatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "donatorCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "donators(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingGoal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingGoal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingGoalReached(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fundingGoalReached()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundings()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundraiserIsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fundraiserIsActive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDonation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minimumDonation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingRequests()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(rec: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "refund(address)"(
      rec: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "requestCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requests(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    statistics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "statistics()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "threshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
