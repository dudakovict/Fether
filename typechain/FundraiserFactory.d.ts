/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FundraiserFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createFundraiser(address,uint256,uint256)": FunctionFragment;
    "fundraisers(uint256)": FunctionFragment;
    "getFundraisers()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createFundraiser",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundraisers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundraisers",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createFundraiser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundraisers",
    data: BytesLike
  ): Result;

  events: {};
}

export class FundraiserFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundraiserFactoryInterface;

  functions: {
    createFundraiser(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createFundraiser(address,uint256,uint256)"(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundraisers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "fundraisers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFundraisers(overrides?: CallOverrides): Promise<[string[]]>;

    "getFundraisers()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  createFundraiser(
    recipient: string,
    fundingGoal: BigNumberish,
    minimumDonation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createFundraiser(address,uint256,uint256)"(
    recipient: string,
    fundingGoal: BigNumberish,
    minimumDonation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundraisers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "fundraisers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFundraisers(overrides?: CallOverrides): Promise<string[]>;

  "getFundraisers()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    createFundraiser(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createFundraiser(address,uint256,uint256)"(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundraisers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "fundraisers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFundraisers(overrides?: CallOverrides): Promise<string[]>;

    "getFundraisers()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    createFundraiser(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createFundraiser(address,uint256,uint256)"(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundraisers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fundraisers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundraisers(overrides?: CallOverrides): Promise<BigNumber>;

    "getFundraisers()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createFundraiser(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createFundraiser(address,uint256,uint256)"(
      recipient: string,
      fundingGoal: BigNumberish,
      minimumDonation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundraisers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fundraisers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundraisers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFundraisers()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
